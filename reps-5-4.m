// set up presentations for groups of order p^(5 + 4)  
// extracted from Brahana 1958 
// additions and corrections Copetti - Newman - O'Brien 

// various functions used to define parameters 
/* 
R - first quadratic irreducible - non-square x^2 - r
S - a cubic irreducible x^3 + r*x - 1
T - second cubic irreducible
U - second quadratic irreducible (x^2 + R(p) * r^2 - 1) 
W - quintic irreducible x^5 + r*x + 1
*/

Presentation := function (p, V)
   F := FreeGroup (5);
   P := pQuotient (F, p, 2: Print := 0, Exponent := p);                         
   rels := [];
   for v in V do 
      rel := 
      (P.1, P.2)^v[1] * (P.1, P.3)^v[2] * (P.1, P.4)^v[3] * (P.1, P.5)^v[4] * 
      (P.2, P.3)^v[5] * (P.2, P.4)^v[6] * (P.2, P.5)^v[7] * (P.3, P.4)^v[8] * 
      (P.3, P.5)^v[9] * (P.4, P.5)^v[10];
      Append (~rels, rel);
   end for;
   return quo < P | rels >; 
end function;

// for #21, #22, #24 and #39 
R := function (p) //quadratic irreducible - non-square
 
   Z := Integers ();
   F := GF (p);
   P<x> := PolynomialRing (F);
   for r in F do 
     if IsIrreducible (x^2 - r) then
        return Z ! r;
     end if;
   end for;
end function;     

// for #36 and #43 
S := function (p) //first cubic irreducible
 
   Z := Integers ();
   F := GF (p);
   P<x> := PolynomialRing (F);
   for r in F do 
     if IsIrreducible (x^3 + r * x - 1) then
        return Z ! r;
     end if;
  end for; 
end function;     

// for #48 
T := function (p) //second cubic irreducible
   Z := Integers ();
   F := GF (p);
   P<x> := PolynomialRing (F);
   for r in F do 
      if IsIrreducible (x^3 + x^2 - r^2) then
        return Z ! r;
      end if;
   end for; 
end function;     

// for #52
U := function (p) //second quadratic irreducible
   Z := Integers ();
   F := GF (p);
   P<x> := PolynomialRing (F);
   for r in F do
      if IsIrreducible (x^2 + R(p) * r^2 - 1) then
        return Z ! r;
      end if;
   end for;
end function;              

// for #54
W := function (p) //quintic irreducible 
   Z := Integers ();
   F := GF (p);
   P<x> := PolynomialRing (F);
   for r in F do 
     if IsIrreducible (x^5 + r*x + 1) then
        return Z ! r;
     end if;
   end for;
end function;     

/* return dual space of U */
DualSpace := function (U)
    F := BaseRing (U);
    d := Degree (U);
    B := Basis (U);
    n := #B;
    K := KMatrixSpace (F, n, d);
    S := K!&cat[Eltseq (B[i]): i in [1..n]];
    return NullSpace (Transpose (S));
end function;

DualGroup := function (G)
   d := FrattiniQuotientRank (G);
   p := FactoredOrder (G)[1][1];
   F := FreeGroup (d);
   H:=pQuotient (F, p, 1);
   H:=pCoveringGroup (H: Exponent := p);
   M :=sub< H | [H.i: i in [d + 1..NPCgens (H)]]>;
   Z := Integers ();
   U := AllowableSubgroup (H, G);
   U := DualSpace (U);
   gens := [];
   for i in [1..Dimension (U)] do
      v := Eltseq (U.i);
      v:=[Z!x: x in v];
      g := &*[M.i^v[i]: i in [1..NPCgens (M)]];
      Append (~gens, g);
   end for;
   s := sub< M | gens>;
   D := quo < H | s>;
   return D;
end function;

// return pc-presentations, matrices, labels and subspaces for 60 groups 
// of order p^(5 + 4) where p is odd 
// first define groups of order p^(5 + 6), then construct duals 

Reps54 := function (p)

assert IsOdd (p);

// these are labels used in Brahana paper 
Labels := ["(0)","(1)","(2)","(3)","(4)","(5)","(6)","(7)","(8)","(9)","(9')",
"(10)","(11)","(12)","(13)","(14)","(15)","(16)","(17)","(18)","(19)", 
"(20)","(20')","(20\")","(21)","(21')",
"(22)","(23)","(24)","(25)","(26)","(27)","(28)","(29)",
"(30)","(31)","(32)","(33)","(34)","(35)","(36)","(37)","(38)","(39)", 
"(40)","(41)","(42)","(43)","(44)","(45)","(46)","(47)","(48)","(49)", 
"(50)","(51)","(52)","(53)","(54)", "(55)"];

spaces := [
// #0 Brahana p.660
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,0],
[0,0,0,1,0,0,0,0,0,0]
],
// #1 p.661
[
[1,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,1,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0]
],
// #2
[
[1,0,0,0,0,0,0,1,0,0],
[0,1,0,0,0,R(p),0,0,0,0],
[0,0,1,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0]
],
// #3
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,1,0,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,1,0,0,0,0,0,0,0]
],
// #4
[
[0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,1],
[0,0,0,0,0,1,0,0,1,0],
[1,1,0,0,0,0,0,0,0,0]
],
// #5
[
[1,0,0,0,0,0,0,1,0,0],
[0,1,0,0,0,0,1,0,0,0],
[0,0,1,0,0,0,0,0,0,0],
[0,1,0,0,1,1,0,1,0,0]
],
// #6
[
[0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,1],
[0,0,0,0,0,1,0,0,1,0],
[1,0,0,0,0,0,0,1,0,0]
],
// #7 p.665
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0]
],
// #8
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0]
],
// #9
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,1]
],
// #9'
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,0],
[0,0,0,1,1,0,0,0,0,0]
],
// #10
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,1]
],
// #11
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,1,0,0,1,0]
],
// #12 p. 667
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,0,0],
[0,0,0,0,0,0,0,0,0,1]
],
// #13
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,0,0],
[0,0,0,1,0,0,1,0,0,0]
],
// #14
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,0,0],
[0,0,0,0,0,0,0,0,1,1]
],
// #15
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,0,0],
[0,0,0,1,0,0,0,1,0,0]
],
// #16
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,0,0],
[0,0,0,1,0,0,1,1,0,0]
],
// #17
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,0,0],
[0,0,0,0,1,0,0,0,0,1]
],
// #18
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,0,0],
[0,0,0,1,1,0,0,0,0,0]
],
// #19 p. 670 - slightly different order for vectors for this batch
[
[1,0,0,0,0,0,0,0,0,0],
[0,0,0,1,0,0,0,0,1,0],
[0,0,0,0,0,0,1,0,0,1],
[0,0,0,0,0,0,0,1,0,0]
],
// #20
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,1,0],
[0,0,0,0,0,0,0,0,0,1]
],
// #20'
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,1,1,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,1]
],
// #20" 
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,1,1,1,0,0,0,0],
[0,0,0,0,0,0,0,0,0,1]
],
// #21
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,1,0,0,0],
[0,0,0,1,0,R(p),0,0,0,0]
],
// #21'
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,1,0,0,0,0,0],
[0,0,0,1,0,1,0,0,0,0]
],
// #22
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,1,0,0,R(p),0],
[0,0,0,0,0,0,1,1,0,0]
],
// #23
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,1,0,0,0,0,0],
[0,0,0,0,0,0,1,1,0,0]
],
// #24
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,0,0,1,0,0,0,0,-R(p)],
[0,0,0,0,0,0,1,1,0,0]
],
// #25
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,1,0],
[0,0,0,0,1,0,0,0,0,1]
],
// #26
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,1,0],
[0,0,0,0,0,0,1,1,0,0]
],
// #27
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,1,0,0,0],
[0,0,0,1,0,0,0,1,0,0]
] ,
// #28 p. 680
[
[1,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[1,0,0,0,0,1,0,0,1,0]
],
// #29
[
[1,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,1,-1,-1,0,0,0,0,1]
],
// #30
[
[1,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,1,-1,0,0,0,0,0,1]
],
// #31
[
[1,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,1,1,0,0,0,1,1,1]
],
// #32
[
[1,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,1,-1,-R(p),0,0,0,0,1]
],
// #33
[
[1,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,0,1,1,0,0,0,0,1]
],
// #34
[
[1,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,0,1,0,1,0,0,0,0]
],
// #35
[
[1,1,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,1,1,1,1,0,0,0,1]
],
// #36  p. 684
[
[1,0,0,0,0,0,0,1,0,0],
[0,1,0,0,0,0,1,0,0,0],
[0,0,0,0,0,1,0,S(p),1,0],
[1,0,1,0,0,0,0,0,0,0]
],
// #37
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,0,R(p),1,0,0,0,0,1]
],
// #38
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,0,0,1,0,0,0,0,1]
],
// #39 
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,0,1,R(p),0,0,0,0,0] 
],
// #40
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,0,1,0,1,0,0,1,0]
],
// #41
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,1,1,-1,0,0,0,0,0]
],
// #42
[
[1,0,0,0,0,0,0,0,0,0],
[0,1,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,1,0,0],
[0,0,1,1,-R(p),0,0,0,0,0]
],
[ 
// #43 p. 690
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,0,1,0,S(p),1,0],
  [0,0,0,0,1,0,0,0,0,0]
],

[ 
// #44
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,1,0,0,0,0,0],
  [0,0,0,1,0,1,0,0,0,0]
],

[ 
// #45
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,0,1,0,0,0,0],
  [0,0,1,0,-R(p),0,0,0,0,0]
],

[ 
// #46
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,0,1,0,0,0,0],
  [0,0,0,R(p),1,0,0,0,0,0]
],

[ 
// #47
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,0,1,0,0,0,0],
  [0,0,1,0,0,0,0,0,1,0]
],

[ 
// #48 
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,1,0,0,0,0,0,0,0],
  [1,0,0,0,0,T(p),0,0,1,0]
],

[ 
// #49
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,0,1,-R(p),0,0,0],
  [0,0,1,0,0,0,0,0,1,0]
],

[ 
// #50
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,0,1,-R(p),0,0,0],
  [0,0,0,R(p),1,0,0,0,0,0]
],

[ 
// #51
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,0,0,0,0,0,1],
  [0,0,1,-R(p),1,0,0,0,0,0]
],

[ 
// #52 
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,0,0,0,0,0,1],
  [0,0,1,R(p),1,U(p),0,0,0,0]
],

[ 
// #53 p. 697
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,1,0,-R(p),0,0,0,0,0],
  [0,0,0,0,0,1,0,S(p),1,0]
],

[ 
// #54 
  [1,0,0,0,0,0,0,1,0,0],
  [0,1,0,0,0,0,1,0,0,0],
  [0,0,0,0,1,0,0,0,0,1],
  [0,0,0,1,-W(p),1,0,0,0,0]
],
// #55 new rep 
[
[1,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,0,1,0,0,0],
[0,0,0,0,0,0,0,0,1,0],
[0,1,0,1,0,R(p),0,0,0,0]
]      
];

P := [Presentation (p, spaces[i]): i in [1..#spaces]];
Q := [DualGroup (x): x in P];

M := [* GroupToMatrix (q): q in Q *];

V := VectorSpace (GF(p), 10);
spaces := [sub<V | s>: s in spaces];
return Q, M, Labels, spaces;
end function;
